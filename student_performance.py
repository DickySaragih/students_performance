# -*- coding: utf-8 -*-
"""student_performance

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11VE7fOKIujaueurlosBVMaDz9c3C84SY
"""

# prompt: buatkan kode untuk deploy ke aplikasi streamlit

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay, f1_score

# Atur tampilan plot
sns.set(style="whitegrid")
plt.rcParams['figure.figsize'] = (10, 6)

# Fungsi untuk memuat dan membersihkan data
@st.cache_data
def load_and_clean_data(url):
    df = pd.read_csv(url)
    # Rename columns: hilangkan spasi dan ubah ke lowercase
    df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_').str.replace("'", '').str.replace('(', '').str.replace(')', '')
    # Rename kolom target
    df.rename(columns={'target': 'dropout_status'}, inplace=True)
    # Cek dan tangani missing value
    df = df.dropna()
    return df

# Fungsi untuk preprocessing data
@st.cache_data
def preprocess_data(df):
    # Pisahkan fitur dan target
    X = df.drop('dropout_status', axis=1)
    y = df['dropout_status']

    # Encode target variable
    le = LabelEncoder()
    y_encoded = le.fit_transform(y)

    # Identifikasi kolom kategorikal dan numerik
    categorical_cols = X.select_dtypes(include=['object', 'category']).columns
    numeric_cols = X.select_dtypes(include=np.number).columns

    # Apply Label Encoding to categorical features
    for col in categorical_cols:
        X[col] = le.fit_transform(X[col])

    # Scaling numerical features
    scaler = StandardScaler()
    if len(numeric_cols) > 0:
        X[numeric_cols] = scaler.fit_transform(X[numeric_cols])

    # Split data
    X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded)

    return X_train, X_test, y_train, y_test, X.columns, le

# Fungsi untuk melatih model
@st.cache_resource
def train_model(X_train, y_train):
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)
    return model

# Fungsi untuk membuat plot distribusi
def plot_distribution(df, col, title, xlabel, ylabel, hue=None, palette='Set2', order=None):
    plt.figure(figsize=(10, 6))
    if df[col].dtype == 'object' or df[col].dtype == 'category':
         sns.countplot(data=df, x=col, hue=hue, palette=palette, order=order)
         plt.xticks(rotation=45, ha='right') # Rotate x-axis labels if categorical
    else:
         sns.histplot(data=df, x=col, hue=hue, kde=True, palette=palette)
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    if hue:
        plt.legend(title='Status')
    plt.tight_layout()
    st.pyplot(plt)

# Fungsi untuk membuat boxplot
def plot_boxplot(df, x_col, y_col, title, xlabel, ylabel, palette='Set2'):
    plt.figure(figsize=(10, 6))
    sns.boxplot(data=df, x=x_col, y=y_col, palette=palette)
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.tight_layout()
    st.pyplot(plt)

# Fungsi untuk menampilkan classification report
def display_classification_report(y_test, y_pred, target_names):
    report = classification_report(y_test, y_pred, target_names=target_names, output_dict=True)
    report_df = pd.DataFrame(report).transpose()
    st.subheader("Classification Report")
    st.dataframe(report_df)

# Fungsi untuk menampilkan feature importance
def plot_feature_importance(model, feature_names):
    importances = model.feature_importances_
    feature_importance_df = pd.DataFrame({'feature': feature_names, 'importance': importances})
    feature_importance_df = feature_importance_df.sort_values('importance', ascending=False)

    st.subheader("Top 10 Most Important Features")
    plt.figure(figsize=(10, 6))
    sns.barplot(x='importance', y='feature', data=feature_importance_df.head(10))
    plt.title('Top 10 Most Important Features for Dropout Prediction')
    plt.tight_layout()
    st.pyplot(plt)


# --- Streamlit App ---
st.title("Prediksi Status Dropout Mahasiswa")
st.markdown("""
Aplikasi ini memuat data performa siswa, melakukan preprocessing, melatih model Random Forest,
dan menampilkan hasil analisis serta prediksi status dropout.
""")

# Load Data
url = 'https://raw.githubusercontent.com/DickySaragih/data_science_02/refs/heads/main/Students_Performance.csv'
df = load_and_clean_data(url)

if st.sidebar.checkbox("Tampilkan Data Mentah"):
    st.subheader("Data Mentah (5 Baris Pertama)")
    st.dataframe(df.head())
    st.subheader("Info Data")
    st.write(df.info())
    st.subheader("Distribusi Target")
    st.write(df['dropout_status'].value_counts())


# EDA Section
st.header("Eksplorasi Data (EDA)")

st.subheader("1. Distribusi Status Dropout Mahasiswa")
plot_distribution(df, 'dropout_status', "Distribusi Status Dropout Mahasiswa", "Status", "Jumlah Mahasiswa")

st.subheader("2. Distribusi Dropout Berdasarkan Gender")
plot_distribution(df, 'gender', "Distribusi Dropout Berdasarkan Gender", "Gender", "Jumlah Mahasiswa", hue='dropout_status')

st.subheader("3. Distribusi Dropout Berdasarkan Jenis Kursus")
order = df['course'].value_counts().index
plot_distribution(df, 'course', "Distribusi Dropout Berdasarkan Jenis Kursus", "Jumlah Mahasiswa", "Kursus", hue='dropout_status', order=order)


st.subheader("4. Dropout Berdasarkan Status Pernikahan")
plot_distribution(df, 'marital_status', "Dropout Berdasarkan Status Pernikahan", "Status Pernikahan", "Jumlah Mahasiswa", hue='dropout_status')

st.subheader("5. Usia saat Masuk Kuliah vs Status Dropout")
plot_boxplot(df, 'dropout_status', 'age_at_enrollment', "Usia saat Masuk Kuliah vs Status Dropout", "Status", "Usia Saat Enroll")


st.header("Model dan Evaluasi")

# Preprocess data
X_train, X_test, y_train, y_test, feature_names, le = preprocess_data(df)

# Train model
model = train_model(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

st.subheader("Confusion Matrix")
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)
fig, ax = plt.subplots()
disp.plot(cmap='Blues', ax=ax)
plt.title("Confusion Matrix")
st.pyplot(fig)

# Classification Report
display_classification_report(y_test, y_pred, target_names=le.classes_)

# Feature Importance
plot_feature_importance(model, feature_names)


st.header("Prediksi Individu")
st.markdown("""
Gunakan bagian ini untuk membuat prediksi status dropout untuk data siswa baru.
Masukkan nilai untuk setiap fitur di bawah ini.
""")

# Contoh Input Form (Anda perlu menyesuaikan ini dengan fitur-fitur aktual dari dataset Anda)
# Ini hanyalah placeholder. Anda harus membuat input fields untuk SETIAP KOLOM di X_train
input_data = {}
st.write("Masukkan nilai fitur (nilai numerik atau pilih dari opsi):")


# --- Auto-generate input fields based on columns ---
st.write("Please add specific input fields based on your dataset's features.")
st.write("Example placeholder for manual input:")

st.info("Implementasi input form prediksi individu memerlukan detail spesifik dari setiap kolom fitur. Bagian ini adalah placeholder.")

st.markdown("---")
st.write("Aplikasi dibuat oleh Dicky Candid Saragih")